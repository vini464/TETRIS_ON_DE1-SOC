#include "../../headers/inputListener.h"


int fd, button = 0;
directions direction = STOP;
extern int LISTEN_BTN, LISTEN_ACCEL;
void startButtonListener() {
  int success, t;
  for (t = 0; t < 10; t++) {
    success = KEY_open();
    if (!success)
      printf("Não foi possível acessar o driver dos botões\n Você rodou como "
             "sudo?\n");
    else
      break;
  }
  if (!success)
    exit(-1);
}

void *buttonListener(void* arg) {
  int btn = 0;
  while (LISTEN_BTN) {
    KEY_read(&btn);
    switch (btn) {
    case 0b0001:
      button = 1;
      break;
    case 0b0010:
      button = 2;
      break;
    case 0b0100:
      button = 3;
      break;
    case 0b1000:
      button = 4;
      break;
    default:
      button = 0;
    }
  }
}
void stopButtonListener(){
  KEY_close();
}

void startAccelListener(){
  int  i;
  for (i = 0; i < 10; i++){
    fd = open_and_mmap_dev_mem();
    if (fd == -1) printf("não foi possível abrir /dev/mem\n");
    else break;
  }
  
  if (fd == -1) exit(-1);
  I2C0_init();
  accel_init();
  accel_calibrate(60);

}
void *accelListener(void * arg){
  int dir = 0;
  while (LISTEN_ACCEL) {
    get_direction(&dir);
    //printf("-%d\n", dir);
    switch (dir) {
    case -1:
      printf("esquerda");
      direction = LEFT; 
      break;
    case 1:
      printf("direita");
      direction = RIGHT; 
      break;
    default:
      direction = STOP;
    }
    usleep(1000);
  }
}
void stopAccelListener(){
      close_and_unmap_dev_mem(fd);
}
